<?php


namespace Mowangjuanzi\LaravelModelStubs;

use Closure;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Contracts\Pagination\Paginator;
use Illuminate\Database\ConnectionInterface;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\Relation;
use Illuminate\Database\Query\Expression;
use Illuminate\Database\Query\Grammars\Grammar;
use Illuminate\Database\Query\Processors\Processor;
use Illuminate\Support\LazyCollection;

/**
 * Trait LaravelModelStubs
 * @method static Builder addBinding($value, $type = 'where')
 * @method static Builder addNestedWhereQuery($query, $boolean = 'and')
 * @method static Builder addSelect($column)
 * @method static Builder addWhereExistsQuery(self $query, $boolean = 'and', $not = false)
 * @method static mixed aggregate($function, $columns = ['*'])
 * @method static Builder applyScopes()
 * @method static mixed average($column)
 * @method static mixed avg($column)
 * @method static bool chunk($count, callable $callback)
 * @method static bool chunkById($count, callable $callback, $column = null, $alias = null)
 * @method static Builder cloneWithout(array $properties)
 * @method static Builder cloneWithoutBindings(array $except)
 * @method static int count($columns = '*')
 * @method static Model|Builder create(array $attributes = [])
 * @method static Builder crossJoin($table, $first = null, $operator = null, $second = null)
 * @method static LazyCollection cursor()
 * @method static void dd()
 * @method static int decrement($column, $amount = 1, array $extra = [])
 * @method static mixed delete()
 * @method static Builder distinct()
 * @method static bool doesntExist()
 * @method static mixed doesntExistOr(Closure $callback)
 * @method static Builder doesntHave($relation, $boolean = 'and', Closure $callback = null)
 * @method static Builder doesntHaveMorph($relation, $types, $boolean = 'and', Closure $callback = null)
 * @method static Builder dump()
 * @method static dynamicWhere($method, $parameters)
 * @method static bool each(callable $callback, $count = 1000)
 * @method static bool eachById(callable $callback, $count = 1000, $column = null, $alias = null)
 * @method static array eagerLoadRelations(array $models)
 * @method static bool exists()
 * @method static mixed existsOr(Closure $callback)
 * @method static Model|Collection|Builder[]|null find($id, $columns = ['*'])
 * @method static Collection findMany($ids, $columns = ['*'])
 * @method static Model|Collection|Builder|Builder[] findOrFail($id, $columns = ['*'])
 * @method static Model|Builder findOrNew($id, $columns = ['*'])
 * @method static Model|Collection|Builder|null first($columns = ['*'])
 * @method static Model|Collection|Builder|null firstOr($columns = ['*'], Closure $callback = null)
 * @method static Model|Builder firstOrCreate(array $attributes, array $values = [])
 * @method static Model|Builder firstOrFail($columns = ['*'])
 * @method static Model|Builder firstOrNew(array $attributes, array $values = [])
 * @method static Model|Builder firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static Model|Builder forceCreate(array $attributes)
 * @method static mixed forceDelete()
 * @method static Builder forNestedWhere()
 * @method static Builder forPage($page, $perPage = 15)
 * @method static Builder forPageAfterId($perPage = 15, $lastId = 0, $column = 'id')
 * @method static Builder forPageBeforeId($perPage = 15, $lastId = 0, $column = 'id')
 * @method static Builder from($table, $as = null)
 * @method static Collection fromQuery($query, $bindings = [])
 * @method static Builder fromRaw($expression, $bindings = [])
 * @method static Builder fromSub($query, $as)
 * @method static Collection|Builder[] get($columns = ['*'])
 * @method static array getBindings()
 * @method static ConnectionInterface getConnection()
 * @method static int getCountForPagination($columns = ['*'])
 * @method static array getEagerLoads()
 * @method static Closure getGlobalMacro($name)
 * @method static Grammar getGrammar()
 * @method static Closure getMacro($name)
 * @method static Model|Builder getModel()
 * @method static Model[]|Builder[] getModels($columns = ['*'])
 * @method static Processor getProcessor()
 * @method static \Illuminate\Database\Query\Builder getQuery()
 * @method static array getRawBindings()
 * @method static Relation getRelation($name)
 * @method static Builder groupBy(...$groups)
 * @method static Builder groupByRaw($sql, array $bindings = [])
 * @method static Builder has($relation, $operator = '>=', $count = 1, $boolean = 'and', Closure $callback = null)
 * @method static bool hasGlobalMacro($name)
 * @method static bool hasMacro($name)
 * @method static Builder hasMorph($relation, $types, $operator = '>=', $count = 1, $boolean = 'and', Closure $callback = null)
 * @method static Builder having($column, $operator = null, $value = null, $boolean = 'and')
 * @method static Builder havingBetween($column, array $values, $boolean = 'and', $not = false)
 * @method static Builder havingRaw($sql, array $bindings = [], $boolean = 'and')
 * @method static Collection hydrate(array $items)
 * @method static string implode($column, $glue = '')
 * @method static int increment($column, $amount = 1, array $extra = [])
 * @method static Builder inRandomOrder($seed = '')
 * @method static bool insert(array $values)
 * @method static int insertGetId(array $values, $sequence = null)
 * @method static int insertOrIgnore(array $values)
 * @method static int insertUsing(array $columns, $query)
 * @method static Builder join($table, $first, $operator = null, $second = null, $type = 'inner', $where = false)
 * @method static Builder joinSub($query, $as, $first, $operator = null, $second = null, $type = 'inner', $where = false)
 * @method static Builder joinWhere($table, $first, $operator, $second, $type = 'inner')
 * @method static Builder latest($column = null)
 * @method static Builder leftJoin($table, $first, $operator = null, $second = null)
 * @method static Builder leftJoinSub($query, $as, $first, $operator = null, $second = null)
 * @method static Builder leftJoinWhere($table, $first, $operator, $second)
 * @method static Builder limit($value)
 * @method static Builder lock($value = true)
 * @method static Builder lockForUpdate()
 * @method static Builder make(array $attributes = [])
 * @method static mixed max($column)
 * @method static Builder mergeBindings(self $query)
 * @method static Builder mergeConstraintsFrom(Builder $from)
 * @method static void mergeWheres($wheres, $bindings)
 * @method static mixed min($column)
 * @method static Model newModelInstance($attributes = [])
 * @method static Builder newQuery()
 * @method static float|int numericAggregate($function, $columns = ['*'])
 * @method static Builder offset($value)
 * @method static Builder oldest($column = null)
 * @method static void onDelete(Closure $callback)
 * @method static Builder orderBy($column, $direction = 'asc')
 * @method static Builder orderByDesc($column)
 * @method static Builder orderByRaw($sql, $bindings = [])
 * @method static Builder orDoesntHave($relation)
 * @method static Builder orDoesntHaveMorph($relation, $types)
 * @method static Builder orHas($relation, $operator = '>=', $count = 1)
 * @method static Builder orHasMorph($relation, $types, $operator = '>=', $count = 1)
 * @method static Builder orHaving($column, $operator = null, $value = null)
 * @method static Builder orHavingRaw($sql, array $bindings = [])
 * @method static Builder orWhere($column, $operator = null, $value = null)
 * @method static Builder orWhereBetween($column, array $values)
 * @method static Builder orWhereColumn($first, $operator = null, $second = null)
 * @method static Builder orWhereDate($column, $operator, $value = null)
 * @method static Builder orWhereDay($column, $operator, $value = null)
 * @method static Builder orWhereDoesntHave($relation, Closure $callback = null)
 * @method static Builder orWhereDoesntHaveMorph($relation, $types, Closure $callback = null)
 * @method static Builder orWhereExists(Closure $callback, $not = false)
 * @method static Builder orWhereHas($relation, Closure $callback = null, $operator = '>=', $count = 1)
 * @method static Builder orWhereHasMorph($relation, $types, Closure $callback = null, $operator = '>=', $count = 1)
 * @method static Builder orWhereIn($column, $values)
 * @method static Builder orWhereJsonContains($column, $value)
 * @method static Builder orWhereJsonDoesntContain($column, $value)
 * @method static Builder orWhereJsonLength($column, $operator, $value = null)
 * @method static Builder orWhereMonth($column, $operator, $value = null)
 * @method static Builder orWhereNotBetween($column, array $values)
 * @method static Builder orWhereNotExists(Closure $callback)
 * @method static Builder orWhereNotIn($column, $values)
 * @method static Builder orWhereNotNull($column)
 * @method static Builder orWhereNull($column)
 * @method static Builder orWhereRaw($sql, $bindings = [])
 * @method static Builder orWhereRowValues($columns, $operator, $values)
 * @method static Builder orWhereTime($column, $operator, $value = null)
 * @method static Builder orWhereYear($column, $operator, $value = null)
 * @method static LengthAwarePaginator paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)
 * @method static \Illuminate\Support\Collection pluck($column, $key = null)
 * @method static array prepareValueAndOperator($value, $operator, $useDefault = false)
 * @method static string qualifyColumn($column)
 * @method static Expression raw($value)
 * @method static array removedScopes()
 * @method static Builder rightJoin($table, $first, $operator = null, $second = null)
 * @method static Builder rightJoinSub($query, $as, $first, $operator = null, $second = null)
 * @method static Builder rightJoinWhere($table, $first, $operator, $second)
 * @method static Builder|mixed scopes($scopes)
 * @method static Builder select($columns = ['*'])
 * @method static Builder selectRaw($expression, array $bindings = [])
 * @method static Builder selectSub($query, $as)
 * @method static Builder setBindings(array $bindings, $type = 'where')
 * @method static Builder setEagerLoads(array $eagerLoad)
 * @method static Builder setModel(Model $model)
 * @method static Builder setQuery($query)
 * @method static Builder sharedLock()
 * @method static Paginator simplePaginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)
 * @method static Builder skip($value)
 * @method static mixed sum($column)
 * @method static mixed take($value)
 * @method static Builder tap($callback)
 * @method static Builder toBase()
 * @method static string toSql()
 * @method static void truncate()
 * @method static Builder union($query, $all = false)
 * @method static Builder unionAll($query)
 * @method static Builder|mixed unless($value, $callback, $default = null)
 * @method static int update(array $values)
 * @method static Model updateOrCreate(array $attributes, array $values = [])
 * @method static Model updateOrInsert(array $attributes, array $values = [])
 * @method static Builder useWritePdo()
 * @method static mixed value($column)
 * @method static Builder when($value, $callback, $default = null)
 * @method static Builder where($column, $operator = null, $value = null, $boolean = 'and')
 * @method static Builder whereBetween($column, array $values, $boolean = 'and', $not = false)
 * @method static Builder whereColumn($first, $operator = null, $second = null, $boolean = 'and')
 * @method static Builder whereDate($column, $operator, $value = null, $boolean = 'and')
 * @method static Builder whereDay($column, $operator, $value = null, $boolean = 'and')
 * @method static Builder whereDoesntHave($relation, Closure $callback = null)
 * @method static Builder whereDoesntHaveMorph($relation, $types, Closure $callback = null)
 * @method static Builder whereExists(Closure $callback, $boolean = 'and', $not = false)
 * @method static Builder whereHas($relation, Closure $callback = null, $operator = '>=', $count = 1)
 * @method static Builder whereHasMorph($relation, $types, Closure $callback = null, $operator = '>=', $count = 1)
 * @method static Builder whereIn($column, $values, $boolean = 'and', $not = false)
 * @method static Builder whereIntegerInRaw($column, $values, $boolean = 'and', $not = false)
 * @method static Builder whereIntegerNotInRaw($column, $values, $boolean = 'and')
 * @method static Builder whereJsonContains($column, $value, $boolean = 'and', $not = false)
 * @method static Builder whereJsonDoesntContain($column, $value, $boolean = 'and')
 * @method static Builder whereJsonLength($column, $operator, $value = null, $boolean = 'and')
 * @method static Builder whereKey($id)
 * @method static Builder whereKeyNot($id)
 * @method static Builder whereMonth($column, $operator, $value = null, $boolean = 'and')
 * @method static Builder whereNested(Closure $callback, $boolean = 'and')
 * @method static Builder whereNotBetween($column, array $values, $boolean = 'and')
 * @method static Builder whereNotIn($column, $values, $boolean = 'and')
 * @method static Builder whereNotNull($columns, $boolean = 'and')
 * @method static Builder whereNull($columns, $boolean = 'and', $not = false)
 * @method static Builder whereRaw($sql, $bindings = [], $boolean = 'and')
 * @method static Builder whereRowValues($columns, $operator, $values, $boolean = 'and')
 * @method static Builder whereTime($column, $operator, $value = null, $boolean = 'and')
 * @method static Builder whereYear($column, $operator, $value = null, $boolean = 'and')
 * @method static Builder with($relations)
 * @method static Builder withCount($relations)
 * @method static Builder withGlobalScope($identifier, $scope)
 * @method static Builder without($relations)
 * @method static Builder withoutGlobalScope($scope)
 * @method static Builder withoutGlobalScopes(array $scopes = null)
 */
trait LaravelModelStubs
{

}
